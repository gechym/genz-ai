name: Pylint

on:
  push:
  pull_request:

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.6"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Find Python files
      run: |
        echo "Python files to be checked:"
        if [ -d "multi_agent" ]; then
          find multi_agent -name "*.py" -type f | head -10
        else
          echo "multi_agent directory not found"
        fi
        if [ -d "server" ]; then
          find server -name "*.py" -type f | head -10
        else
          echo "server directory not found"
        fi
    
    - name: Run Pylint with Score Check
      run: |
        echo "🔍 Running Pylint with STRICT 10/10 requirement..."
        DIRS=""
        if [ -d "multi_agent" ]; then
          DIRS="$DIRS multi_agent/"
        fi
        if [ -d "server" ]; then
          DIRS="$DIRS server/"
        fi
        
        if [ -n "$DIRS" ]; then
          # Run pylint and capture output
          echo "Checking directories: $DIRS"
          poetry run pylint $DIRS --output-format=text | tee pylint-output.txt
          
          # Extract score using Python for reliable floating point comparison
          SCORE=$(grep "Your code has been rated at" pylint-output.txt | sed 's/.*rated at \([0-9.]*\).*/\1/' || echo "0")
          echo "📊 Pylint Score: $SCORE/10"
          
          # Use Python to check if score is exactly 10.00
          IS_PERFECT=$(python3 -c "import sys; score = float('$SCORE' if '$SCORE' else '0'); print('1' if score == 10.0 else '0')")
          
          if [ "$IS_PERFECT" = "1" ]; then
            echo "✅ PERFECT SCORE! Code quality is 10/10! 🎉"
            echo "🚀 All checks passed - ready for merge!"
          else
            echo "❌ FAILED: Score $SCORE/10 is not perfect!"
            echo "🎯 REQUIREMENT: Must achieve exactly 10.00/10 to pass"
            echo "📋 Please fix all pylint issues before merging"
            echo ""
            echo "💡 Common fixes needed:"
            echo "   - Add missing newlines at end of files"
            echo "   - Fix import order and formatting"
            echo "   - Add missing docstrings"
            echo "   - Follow naming conventions"
            exit 1
          fi
        else
          echo "❌ No directories found to analyze"
          exit 1
        fi
    
    - name: Generate JSON Report
      if: always()
      run: |
        echo "📄 Generating detailed JSON report..."
        DIRS=""
        if [ -d "multi_agent" ]; then
          DIRS="$DIRS multi_agent/"
        fi
        if [ -d "server" ]; then
          DIRS="$DIRS server/"
        fi
        
        if [ -n "$DIRS" ]; then
          poetry run pylint $DIRS --exit-zero --output-format=json > pylint-report.json || true
        else
          echo "[]" > pylint-report.json
        fi
    
    - name: Display Detailed Results
      if: always()
      run: |
        if [ -f pylint-report.json ]; then
          echo "📊 Pylint Analysis Complete"
          if command -v jq &> /dev/null; then
            MESSAGES_COUNT=$(cat pylint-report.json | jq '. | length')
            echo "Total issues found: $MESSAGES_COUNT"
            
            if [ "$MESSAGES_COUNT" -eq 0 ]; then
              echo "🎉 NO ISSUES FOUND - PERFECT CODE!"
            else
              echo "🚨 Issues that need to be fixed:"
              cat pylint-report.json | jq '.[] | "\(.path):\(.line):\(.column): \(.message-id): \(.message)"' -r | head -10
            fi
          fi
        fi
    
    - name: Upload pylint report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pylint-report
        path: |
          pylint-report.json
          pylint-output.txt 