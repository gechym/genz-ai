name: Code Quality (All-in-One)

on:
  push:
  pull_request:

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.6"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Validate Project Structure
      run: |
        echo "🔍 Validating project structure..."
        DIRS=""
        if [ -d "multi_agent" ]; then
          DIRS="$DIRS multi_agent/"
          echo "✅ multi_agent/ found"
        else
          echo "⚠️  multi_agent/ not found"
        fi
        if [ -d "server" ]; then
          DIRS="$DIRS server/"
          echo "✅ server/ found"
        else
          echo "⚠️  server/ not found"
        fi
        
        if [ -z "$DIRS" ]; then
          echo "❌ No target directories found!"
          exit 1
        fi
        
        echo "TARGET_DIRS=$DIRS" >> $GITHUB_ENV
        echo "📁 Target directories: $DIRS"
    
    - name: 🎨 Ruff Format Check
      run: |
        echo "🎨 Running Ruff Format Check (STRICT)..."
        if poetry run ruff format --check $TARGET_DIRS; then
          echo "✅ RUFF FORMAT: PASSED"
        else
          echo "❌ RUFF FORMAT: FAILED"
          echo "💡 Fix: poetry run ruff format $TARGET_DIRS"
          exit 1
        fi
    
    - name: 🔍 Ruff Linting Check
      run: |
        echo "🔍 Running Ruff Linting (STRICT)..."
        if poetry run ruff check $TARGET_DIRS --output-format=full; then
          echo "✅ RUFF LINTING: PASSED"
        else
          echo "❌ RUFF LINTING: FAILED"
          echo "💡 Fix: poetry run ruff check $TARGET_DIRS --fix"
          exit 1
        fi
    
    - name: 🔬 MyPy Type Check
      run: |
        echo "🔬 Running MyPy Type Check (STRICT)..."
        if poetry run mypy $TARGET_DIRS --config-file=pyproject.toml 2>&1 | tee mypy-output.txt; then
          ERROR_COUNT=$(grep -c "error:" mypy-output.txt || echo "0")
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "❌ MYPY: FAILED ($ERROR_COUNT errors)"
            exit 1
          else
            echo "✅ MYPY: PASSED"
          fi
        else
          echo "❌ MYPY: FAILED"
          exit 1
        fi
    
    - name: 📊 Pylint Score Check
      run: |
        echo "📊 Running Pylint Score Check (STRICT 10/10)..."
        poetry run pylint $TARGET_DIRS --output-format=text | tee pylint-output.txt
        
        SCORE=$(grep "Your code has been rated at" pylint-output.txt | sed 's/.*rated at \([0-9.]*\).*/\1/' || echo "0")
        echo "📊 Pylint Score: $SCORE/10"
        
        IS_PERFECT=$(python3 -c "import sys; score = float('$SCORE' if '$SCORE' else '0'); print('1' if score == 10.0 else '0')")
        
        if [ "$IS_PERFECT" = "1" ]; then
          echo "✅ PYLINT: PERFECT SCORE (10/10)"
        else
          echo "❌ PYLINT: FAILED ($SCORE/10)"
          echo "🎯 REQUIREMENT: Must achieve exactly 10.00/10"
          exit 1
        fi
    
    - name: 🎉 All Quality Checks Passed
      run: |
        echo "🎉 =============================================="
        echo "🏆 ALL CODE QUALITY CHECKS PASSED!"
        echo "=============================================="
        echo "✅ Ruff Format: PERFECT"
        echo "✅ Ruff Linting: CLEAN"  
        echo "✅ MyPy Types: SAFE"
        echo "✅ Pylint Score: 10/10"
        echo "=============================================="
        echo "🚀 Code is ready for merge! 🚀"
        echo "=============================================="
    
    - name: Generate All Reports
      if: always()
      run: |
        echo "📄 Generating comprehensive reports..."
        
        # Pylint reports
        poetry run pylint $TARGET_DIRS --exit-zero --output-format=json > all-pylint-report.json || true
        
        # Ruff reports  
        poetry run ruff check $TARGET_DIRS --output-format=json > all-ruff-report.json || true
        
        # MyPy reports
        poetry run mypy $TARGET_DIRS --config-file=pyproject.toml --json-report=all-mypy-json || true
        
        echo "All reports generated successfully"
    
    - name: Upload All Quality Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: all-quality-reports
        path: |
          pylint-output.txt
          mypy-output.txt
          all-pylint-report.json
          all-ruff-report.json
          all-mypy-json/ 