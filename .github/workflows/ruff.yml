name: Ruff

on:
  push:
  pull_request:

jobs:
  ruff:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.6"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Find Python files
      run: |
        echo "Python files to be checked:"
        if [ -d "multi_agent" ]; then
          find multi_agent -name "*.py" -type f | head -10
        else
          echo "multi_agent directory not found"
        fi
        if [ -d "server" ]; then
          find server -name "*.py" -type f | head -10
        else
          echo "server directory not found"
        fi
    
    - name: Run Ruff Linter (STRICT)
      run: |
        echo "🔍 Running Ruff Linter with ZERO TOLERANCE..."
        DIRS=""
        if [ -d "multi_agent" ]; then
          DIRS="$DIRS multi_agent/"
        fi
        if [ -d "server" ]; then
          DIRS="$DIRS server/"
        fi
        
        if [ -n "$DIRS" ]; then
          echo "Checking directories: $DIRS"
          
          # Run ruff check (linting)
          echo "📋 Running ruff check..."
          if poetry run ruff check $DIRS --output-format=full; then
            echo "✅ RUFF CHECK PASSED - No linting issues found! 🎉"
          else
            echo "❌ RUFF CHECK FAILED!"
            echo "🎯 REQUIREMENT: Zero linting violations allowed"
            echo "📋 Please fix all ruff issues before merging"
            exit 1
          fi
        else
          echo "❌ No directories found to analyze"
          exit 1
        fi
    
    - name: Run Ruff Formatter Check (STRICT)
      run: |
        echo "🎨 Running Ruff Formatter Check with ZERO TOLERANCE..."
        DIRS=""
        if [ -d "multi_agent" ]; then
          DIRS="$DIRS multi_agent/"
        fi
        if [ -d "server" ]; then
          DIRS="$DIRS server/"
        fi
        
        if [ -n "$DIRS" ]; then
          echo "Checking format for directories: $DIRS"
          
          # Run ruff format check (formatting)
          echo "📐 Running ruff format --check..."
          if poetry run ruff format --check $DIRS; then
            echo "✅ RUFF FORMAT PASSED - Code is perfectly formatted! 🎉"
          else
            echo "❌ RUFF FORMAT FAILED!"
            echo "🎯 REQUIREMENT: All code must be properly formatted"
            echo "💡 To fix: Run 'poetry run ruff format $DIRS' locally"
            exit 1
          fi
        else
          echo "❌ No directories found to analyze"
          exit 1
        fi
    
    - name: Generate Ruff Reports
      if: always()
      run: |
        echo "📄 Generating detailed Ruff reports..."
        DIRS=""
        if [ -d "multi_agent" ]; then
          DIRS="$DIRS multi_agent/"
        fi
        if [ -d "server" ]; then
          DIRS="$DIRS server/"
        fi
        
        if [ -n "$DIRS" ]; then
          # Generate JSON report for linting
          poetry run ruff check $DIRS --output-format=json > ruff-check-report.json || true
          
          # Generate text report for linting
          poetry run ruff check $DIRS --output-format=full > ruff-check-report.txt || true
          
          echo "Reports generated successfully"
        else
          echo "[]" > ruff-check-report.json
          echo "No files to check" > ruff-check-report.txt
        fi
    
    - name: Display Summary
      if: always()
      run: |
        echo "📊 Ruff Analysis Summary"
        
        if [ -f ruff-check-report.json ]; then
          if command -v jq &> /dev/null; then
            ISSUES_COUNT=$(cat ruff-check-report.json | jq '. | length')
            echo "Total linting issues: $ISSUES_COUNT"
            
            if [ "$ISSUES_COUNT" -eq 0 ]; then
              echo "🎉 NO LINTING ISSUES - PERFECT CODE!"
            else
              echo "🚨 Issues found (first 10):"
              cat ruff-check-report.json | jq '.[] | "\(.filename):\(.location.row):\(.location.column): \(.code) \(.message)"' -r | head -10
            fi
          fi
        fi
        
        echo "💡 Quick fixes:"
        echo "   - Format: poetry run ruff format multi_agent/ server/"
        echo "   - Auto-fix: poetry run ruff check multi_agent/ server/ --fix"
    
    - name: Upload Ruff Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ruff-reports
        path: |
          ruff-check-report.json
          ruff-check-report.txt 